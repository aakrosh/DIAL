#!/usr/bin/env python

from sys import argv, stderr, exit

class fastqsequence:
    def __init__(self, name, seq, qual):
        self.name = name
        self.seq  = seq
        self.qual = qual

    def fq2seqfa(self):
        str  = ">%s\n" % self.name
        str += "%s\n" % self.seq
        return str[:-1]

    def fq2qfa(self, offset):
        str  = ">%s\n" % self.name
        for q in self.qual:
            str += "%d " % (ord(q) - offset)
        return str[:-1]

    def __str__(self):
        str = "@%s\n" % self.name
        str += "%s\n" % self.seq
        str += "+\n"
        str += "%s\n" % self.qual
        return str[:-1]

    def __len__(self):
        assert len(self.seq) == len(self.qual)
        return len(self.seq)

class fastq:
    def __init__(self, filename):
        self.file = open(filename, "r")
        self.fastqsequence = None

    def __del__(self):
        self.file.close()

    def __iter__(self):
        return self

    @staticmethod
    def checkbases(line):
        for base in line.strip():
            if base not in ["a","c","g","t","n","A","C","G","T","N","."]:
                return False
        return True

    def close(self):
        self.file.close()

    def next(self):
        line = self.file.readline()
        if not line:
            self.file.close()
            raise StopIteration
        assert line[0] == "@", "header should begin with a @ in a fastq file"
        name = line[1:-1]
        
        line = self.file.readline()
        assert fastq.checkbases(line) == True, \
        "read %s should only have ACGTN" % name
        seq = line.strip().upper()
        
        line = self.file.readline()
        assert line[0] == "+", \
        "separator line in fastq file should begin with a +"

        line = self.file.readline()
        qual = line.strip()

        self.fastqsequence = fastqsequence(name, seq, qual)
    
        return self


"""
Given a name of the fastq file, this writes two files, one for bases and the
other for quality. The format is the same as that for the 454 reads. So a file 
name.fastq will be written to two files: name.fa and name.qual
"""
def main():
    # whats the names of the input and output files
    sindex = argv[1].rfind("/")
    if sindex == -1:
        sindex = 0
    eindex = argv[1].find(".fastq") 

    if eindex == -1:
        print >> stderr, "fastq filenames are expected to end in .fastq"
        exit(1)

    # lets read a few (100) reads once and decide on the offset for the quality
    records = fastq(argv[1])
    numRead = 0
    minAsciiValue = 1000

    for r in records:
        s = r.fastqsequence

        for q in s.qual:
            if ord(q) < minAsciiValue:
                minAsciiValue = ord(q)

        numRead += 1
        if numRead == 100: break

    records.close()
    if minAsciiValue >= 64:
        offset = 64
    elif minAsciiValue >= 33:
        offset = 33
    else:
        print >> stderr, "Unable to calculate the offset for the reads"
        exit(4)


    prefix = argv[1][sindex:eindex]
    readsFile = open("%s.fa" % prefix, "w")
    qualsFile = open("%s.qual" % prefix, "w")

    # now lets go through and print out the fasta sequence and the quality
    records = fastq(argv[1])
    
    for r in records:
        s = r.fastqsequence   
        
        # does the name of the fastq sequence have more than one token? If yes,
        # we join them using ":" to form a single unique identifier
        if len(s.name.split()) > 1:
            s.name = ":".join(s.name.split())

        print >> readsFile, ">%s" % s.name
        print >> readsFile, "%s"  % s.seq

        print >> qualsFile, ">%s" % s.name
        quals = []
        for q in s.qual:
            quals.append(str(ord(q) - offset))
        print >> qualsFile, " ".join(quals)

    records.close()
    readsFile.close()
    qualsFile.close()

if __name__ == "__main__":
    main()
